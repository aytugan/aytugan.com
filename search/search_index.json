{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"email/","title":"E-mail's notes","text":""},{"location":"email/#services","title":"Services","text":""},{"location":"email/#email-message-analysers","title":"Email message analysers","text":"<ul> <li>https://www.gmass.co/analyze</li> <li>https://mxtoolbox.com/deliverability</li> </ul>"},{"location":"linux_commands/","title":"Usefull Linux commands and snippets","text":""},{"location":"linux_commands/#copy-files-betweeen-servers","title":"Copy files betweeen servers","text":""},{"location":"linux_commands/#using-nc-nectat","title":"Using nc (nectat)","text":"<p>Copy folder from one linux server to another. Recommended to use terminal window managers such as byobu or tmux to prevent interruptions if your laptop get disconnected from the server's ssh session.</p> <p>On target server</p> <pre><code># Before transfer\niptables -A INPUT -p tcp --dport 12345 -j ACCEPT\ncd targetdirectory\nnc -l 12345 |tar xvf -\n\n# After transfer\niptables -D INPUT -p tcp --dport 12345 -j ACCEPT\n</code></pre> <p>On source server</p> <pre><code>cd sourcedirectory\ntar cvf - . | nc &lt;destination_host&gt; 12345\n</code></pre>"},{"location":"linux_commands/#using-rsync","title":"Using rsync","text":"<p>Recommended to perform bulk sync using netcat first, and then sync the difference using rsynk. Required enabled ssh agent locally and configured ssh forwarding on the source server.</p> <p>Run on source server</p> <pre><code># Set remote server\nSERVER=\"1.1.1.1\"\nPORT=\"22\"\nLOGIN=\"user\"\n\n# Set PATHS\nSRCPATH=\"/tmp/data\"\nDSTPATH=\"/tmp/data\"\n\n# Set ssh parameters\nexport RSYNC_RSH=\"ssh -p $PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"\n\n# Run rsync\nrsync --rsync-path=\"sudo rsync\" --recursive --compress --delete --verbose --progress $SRCPATH $LOGIN@$SERVER:$DSTPATH\n</code></pre> <p>There is nothing should be run on the target server</p>"},{"location":"linux_commands/#files","title":"Files","text":""},{"location":"linux_commands/#create-tar-archive-using-numeric-id-of-owner-and-groups","title":"Create tar archive using numeric ID of owner and groups","text":"<p>Useful to backup container's data folders</p> <pre><code>tar --numeric-owner --no-acls --no-selinux --no-xattrs --same-owner \\\n-cvzf file.tgz folder\n</code></pre>"},{"location":"linux_commands/#security","title":"Security","text":""},{"location":"linux_commands/#secure-free-space-wipe","title":"Secure free space wipe","text":"<pre><code>apt -y install secure-delete\nsfill -fllv /\n</code></pre>"},{"location":"linux_commands/#luks-disk-encryption","title":"LUKS disk encryption","text":"<p>https://www.howtoforge.com/tutorial/how-to-encrypt-a-linux-partition-with-dm-crypt-luks/</p> <pre><code># Create disk:\ncryptsetup --verbose --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random luksFormat /dev/sda3\n\n# Open disk (create device /dev/mapper/data2):\ncryptsetup open --type luks /dev/sda1 data2\n</code></pre>"},{"location":"linux_commands/#ssh","title":"SSH","text":""},{"location":"linux_commands/#ssh-port-forward","title":"SSH port forward","text":"<pre><code>ssh -L 192.168.0.10:8080:10.0.0.10:80 root@10.0.0.10\n</code></pre>"},{"location":"linux_commands/#using-tpm-for-ssh-private-key-storage","title":"Using TPM for ssh private key storage","text":"<p>https://github.com/Foxboron/ssh-tpm-agent</p>"},{"location":"nginx/","title":"Nginx web server notes","text":""},{"location":"nginx/#replace-content-in-the-backend-response","title":"Replace content in the backend response","text":"<pre><code>location /admin/ {\n    proxy_pass http://localhost:8080/;\n    proxy_set_header Accept-Encoding \"\";\n    sub_filter \"http://your_server/\" \"http://your_server/admin/\";\n    sub_filter_once off;\n}\n</code></pre>"},{"location":"proxmox/","title":"Proxmox Virtual Environment","text":""},{"location":"proxmox/#cluster","title":"Cluster","text":"<p>Get cluster status - <code>pvecm status</code></p> <p>Reduce number of nodes requires for quorum, if some nodes in cluster are not available - <code>pvecm expected 1</code></p>"},{"location":"proxmox/#corosync","title":"Corosync","text":"<p>Corosync is a distributed configuration storage where proxmox stores cluster information</p> <p>Apply update to <code>/etc/pve/coronosync.conf</code> - <code>corosync-cfgtool -R</code></p> <p>After major changes of <code>corosync.conf</code> file <code>corosync</code> service must be restarted on all nodes</p>"},{"location":"proxmox/#network","title":"Network","text":"<p>Example of Bridges and NAT in network configuration</p> <pre><code>auto lo\niface lo inet loopback\n\niface enp0s25 inet manual\n\nauto vmbr0\niface vmbr0 inet static\n        address 172.16.12.10/24\n        gateway 172.16.12.1\n        bridge-ports enp0s25\n        bridge-stp off\n        bridge-fd 0\n\nauto vmbr1\niface vmbr1 inet static\n        address 172.16.111.1/24\n        bridge-ports none\n        bridge-stp off\n        bridge-fd 0\n\n        post-up echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n        post-up   iptables -t nat -A POSTROUTING -s 172.16.122.0/24 -o vmbr0 -j MASQUERADE\n        post-down iptables -t nat -D POSTROUTING -s 172.16.122.0/24 -o vmbr0 -j MASQUERADE\n\n</code></pre> <p>Example of IP alias</p> <pre><code>auto vmbr0\niface vmbr0 inet static\n        ...\n        up ip addr add 1.2.3.4/24 dev vmbr0 label vmbr0:1\n        down ip addr del 1.2.3.4/24 dev vmbr0 label vmbr0:1\n</code></pre> <p>Tips:</p> <ul> <li>Proxmox node IP address must use IP of internal bridge interface</li> </ul> <p>DHCP server setup - https://computingforgeeks.com/using-dnsmasq-dhcp-server-proxmox-vms/</p>"},{"location":"proxmox/#commands","title":"Commands","text":"<ul> <li>Rescan disks for VM <code>qm rescan --vmid &lt;VMID&gt;</code></li> <li>Rescan all disks <code>qm rescan</code></li> </ul>"},{"location":"proxmox/#zfs-cache","title":"ZFS Cache","text":"<p>ZFS cache does not counts in Linux cache and can get memory from other apps. </p> <p>Show ZFS cache statistics <code>arcstat</code> , very detailed stat: <code>arc_summary</code></p> <p>Limit ZFS cache to 8Gb on the fly</p> <pre><code>echo 8589934592 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_max\n</code></pre> <p>Limit ZFS cache permanently - create file <code>/etc/modprobe.d/zfs</code></p> <pre><code>options zfs zfs_arc_max=8589934592\noptions zfs zfs_arc_min=1073741824\n</code></pre>"},{"location":"proxmox/#assing-full-privileges-to-admin-group","title":"Assing full privileges to Admin group","text":"<pre><code>pveum aclmod / -group Admin -role Administrator\n</code></pre>"},{"location":"wireguard/","title":"Wireguard","text":""},{"location":"wireguard/#links","title":"Links","text":"<p>https://www.wireguard.com/netns/#the-new-namespace-solution</p> <p>https://www.opennet.ru/tips/2683_linux_namespace_gateway_virtual_route_iproute.shtml</p> <p>https://www.stableit.ru/2015/06/bird-bgp.html</p> <p>https://vincent.bernat.ch/en/blog/2018-route-based-vpn-wireguard</p> <p>Kilo is a multi-cloud network overlay built on WireGuard and designed for Kubernetes - https://github.com/squat/kilo</p>"},{"location":"wireguard/#unofficial-documentation","title":"Unofficial documentation","text":"<ul> <li>https://github.com/pirate/wireguard-docs</li> <li>https://monadical.com/posts/wireguard.html (very detailed doc)</li> </ul>"},{"location":"wireguard/#notes","title":"Notes","text":"<p>VPN channel should have same MTU from both sides</p>"},{"location":"wireguard/#route","title":"Route","text":"<pre><code>ip -4 route add 172.16.0.0/16 dev wg3\n\n</code></pre>"},{"location":"wireguard/#custom-routing-for-tunnels","title":"Custom routing for tunnels","text":"<p>For custom routing, built-in wireguard routing should be switched off via <code>Table = off</code> and AllowedIPs should be configured as <code>AllowedIPs = 0.0.0.0/1, 128.0.0.0/1</code></p> <pre><code>[Interface]\nAddress =  172.16.101.10/30\nPrivateKey = *****=\nListenPort = 1234\nTable = off\n\n[Peer]\nPublicKey = ****=\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nEndpoint = 11.22.33.44:1234\nPersistentKeepalive = 25\n</code></pre>"},{"location":"wireguard/#autostart-tunnel","title":"Autostart tunnel","text":"<pre><code>systemctl enable wg-quick@wg1.service\n</code></pre>"},{"location":"wireguard/#hot-tunnel-reload","title":"Hot tunnel reload","text":"<pre><code>wg syncconf wg1 &lt;(wg-quick strip wg1)\n</code></pre>"},{"location":"wireguard/#wireguard-on-windows-as-a-service","title":"Wireguard on windows as a service","text":"<ul> <li>https://r-pufky.github.io/docs/services/wireguard/windows-setup.html</li> </ul>"},{"location":"wireguard/#hooks-for-wireguard","title":"Hooks for wireguard","text":"<pre><code>PreUp = iptables -A INPUT -p udp --dport 5502 -j ACCEPT -m comment --comment \"WG 5502 UDP\"\nPostUp = iptables -A INPUT -i wg5502 -j ACCEPT -m comment --comment \"WG 5502 Tunnel\"\nPostDown = iptables -D INPUT -i wg5502 -j ACCEPT -m comment --comment \"WG 5502 Tunnel\"; iptables -D INPUT -p udp --dport 5502 -j ACCEPT -m comment --comment \"WG 5502 UDP\"\n</code></pre>"},{"location":"wireguard/#wireguard-can-be-configured-via-netplan","title":"Wireguard can be configured via netplan","text":"<ul> <li>https://netplan.io/reference/</li> <li>https://forum.turris.cz/t/wireguard-setup/6991/41</li> </ul> <pre><code>tunnels:\n  wg0:\n    mode: wireguard\n    addresses: [...]\n    peers:\n      - keys:\n          public: rlbInAj0qV69CysWPQY7KEBnKxpYCpaWqOs/dLevdWc=\n          shared: /path/to/shared.key\n        ...\n    key: mNb7OIIXTdgW4khM7OFlzJ+UPs7lmcWHV7xjPgakMkQ=\n</code></pre>"},{"location":"wireguard/#wireguard-gui","title":"Wireguard GUI","text":"<ul> <li>Multi-user GUI - https://docs.firezone.dev/docs/deploy/server/</li> <li>Simple single-user GUI - https://github.com/WeeJeWel/wg-easy</li> </ul>"},{"location":"wireguard/#simple-vpn-server-installation","title":"Simple VPN server installation","text":"<p>1) Deploy VPS with Ubuntu 22.04. Minimum 1 core and 0.5Gb RAM is required.</p> <p>2) Login into VPS via ssh and run <code>sudo su -</code> command</p> <p>3) Copy and paste below commands, enter \"Y\" or \"Enter\" on all requests</p> <pre><code># Update system\n\napt -y update\napt -y install nano\napt -y dist-upgrade\napt -y autoremove\n\n# Install fail2ban to prevent ssh password brute-force\napt -y install fail2ban\n\n# Install docker\n\ncurl -sSL https://get.docker.com | sudo sh\n\n# Install wg-easy\nmkdir -p /opt/wgeasy\ncd /opt/wgeasy\n</code></pre> <p>3) run <code>nano /opt/wgeasy/docker-compose.yml</code></p> <p>change <code>WG_HOST=11.22.33.44</code> to VPS IP address, <code>PASSWORD=changeme</code> to some password  and paste into editor </p> <pre><code>version: \"3.8\"\nservices:\n  wg-easy:\n    environment:\n      # Change this to your host's public address\n      - WG_HOST=11.22.33.44\n      - PASSWORD=changeme\n      - WG_DEFAULT_DNS=1.1.1.1,8.8.8.8\n      - WG_MTU=1420\n\n    image: weejewel/wg-easy\n    container_name: wg-easy\n    volumes:\n      - .:/etc/wireguard\n    ports:\n      - \"51820:51820/udp\"\n      - \"51821:51821/tcp\"\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n</code></pre> <p>4) Press <code>Ctrl-X</code>, <code>Y</code> and <code>Enter</code> to save a file</p> <p>5) run <code>docker compose up -d</code></p> <p>6) open http://your-vps-ip:51821 in browser to configure VPN server</p>"}]}